'''
For:Geometric correction map projection.

Time:10/19/2021
Author:Guo Jiaxiang
Emailï¼šguojiaxiang0820@gmail.com
GitHubBlog:https://github.com/guojx0820
'''

import os
from osgeo import gdal, osr


# Define a function which is geometricing correction of remote sensing images.
def modis_geo(input_file, geo_file, geo_name, output_file, geo_bound, x_res, y_res):
    # Read a *.hdf file using Open() function of GDAL lib
    dataset = gdal.Open(input_file)
    # Get the subdatasets' name from the dataset using the function GetSubDatasets() of GDAL lib.
    subdatasets = dataset.GetSubDatasets()
    # Set dataset and target data's order of 0 and -1.
    total_dataset_ord = 0
    tar_dateset_ord = -1
    # Print all the subdatesets' name in the dataset.
    for subdataset in subdatasets:
        print(subdataset)
        sub_name = subdataset[0]
        #
        if sub_name.endswith(geo_name):
            tar_dateset_ord = total_dataset_ord
        total_dataset_ord += 1
    # Batch processing the date of the subdataset files.
    if tar_dateset_ord != -1:
        target_dataset = dataset.GetSubDatasets()[tar_dateset_ord][0]
        # Reverve search file path using the function of os lib.
        '''
        os.path.splittext() is more used to search for file path and file extension. 
        These two combine to form a complete path. 
        If we use the normal split() function to obtain the extension, the efficiency is very low.
        '''
        # VRT file is a virtual file format generated by GDAL function,
        # which is used for geometric correction of images.
        vrt_search = os.path.splitext(input_file)[0] + '.vrt'
        vrt_output = gdal.Translate(vrt_search, target_dataset, \
                                    format='vrt', unscale='true')
        # Creating a spatial reference coordinate system, wgs1984
        srs = osr.SpatialReference()
        srs.ImportFromEPSG(4326)
        # Calling the function Warp() of GDAL to correct the images of *.hdf dataset of MODIS.
        geo_cor_data = gdal.Warp(output_file, vrt_output, multithread=True, outputBounds=geo_bound,
                                 format='GTiff', geoloc=True, dstSRS=srs,
                                 xRes=x_res, yRes=y_res, dstNodata=0.0, outputType=gdal.GDT_Float32)
        print('The geometric correction of {} has finished!'.format(input_file))
        os.remove(vrt_search)
    else:
        print('{} has no the target dataset.'.format(input_file))
    return geo_file, geo_cor_data


if __name__ == '__main__':
    # Set the format and path of the dataset with batch processing.
    file_postfix = '.hdf'
    input_directory = '/Users/leo/Desktop/Data/OriginalData/'
    output_directory = '/Users/leo/Desktop/Data/Results/'
    if not os.path.exists(output_directory):
        os.mkdir(output_directory)
    file_list = os.listdir(input_directory)
    for i in file_list:
        if i.endswith(file_postfix):
            # Output file name.
            file_name = input_directory + i
            output_file12 = output_directory + '20190817-b12' + '_geo.tiff'
            output_file34567 = output_directory + '20190817-b34567' + '_geo.tiff'
            # Target subdataset name.
            subdataset_name12 = 'MODIS_SWATH_Type_L1B:EV_250_Aggr1km_RefSB'
            subdataset_name34567 = 'MODIS_SWATH_Type_L1B:EV_500_Aggr1km_RefSB'
            geo_bound = None
            # Set the pixel resolution of the output (x and y direction).
            # Here we use latitude and longitude units.
            x_res = 0.01
            y_res = 0.01
            # Executing the modis_geo() function.
            execute = modis_geo(file_name, file_name, subdataset_name12, output_file12, geo_bound, x_res, y_res)
            execute = modis_geo(file_name, file_name, subdataset_name34567, output_file34567, geo_bound, x_res, y_res)
